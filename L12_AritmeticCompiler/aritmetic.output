Terminals unused in grammar

    S_FOR
    S_PRINTLN
    S_SQRT


Grammar

    0 $accept: file_content $end

    1 file_content: statements

    2 statements: ε
    3           | statement statements
    4           | S_NEWLINE statements

    5 statement: declaration S_SEMICOLON
    6          | expr S_SEMICOLON
    7          | IDENTIFIER S_EQUALS expr S_SEMICOLON
    8          | S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE
    9          | S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE
   10          | S_WHILE S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE
   11          | S_RETURN expr S_SEMICOLON
   12          | class
   13          | function

   14 declaration: S_VAR IDENTIFIER S_COLON type S_EQUALS expr
   15            | S_VAR IDENTIFIER S_EQUALS expr
   16            | S_VAR IDENTIFIER S_COLON type

   17 type: IDENTIFIER
   18     | S_FLOAT_TYPE

   19 class: S_CLASS IDENTIFIER S_LBRACE class_body S_RBRACE

   20 class_body: ε
   21           | class_members

   22 class_members: class_member
   23              | class_member class_members
   24              | function
   25              | function class_members

   26 class_member: declaration S_SEMICOLON

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_LBRACE statements S_RBRACE

   29 params: ε
   30       | IDENTIFIER S_COLON type
   31       | IDENTIFIER S_COLON type S_COMMA params

   32 args: ε
   33     | expr
   34     | expr S_COMMA args

   35 expr: NUMBER
   36     | FLOAT
   37     | IDENTIFIER
   38     | STRING
   39     | IDENTIFIER S_OBRACE args S_CBRACE
   40     | expr S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr S_DOT IDENTIFIER
   42     | expr S_PLUS expr
   43     | expr S_MINUS expr
   44     | expr S_DIV expr
   45     | expr S_MUL expr
   46     | expr S_MOD expr
   47     | expr S_POW expr
   48     | S_MINUS expr
   49     | expr S_EQ expr
   50     | expr S_NEQ expr
   51     | expr S_LE expr
   52     | expr S_GE expr
   53     | expr S_LT expr
   54     | expr S_GT expr
   55     | expr S_AND expr
   56     | expr S_OR expr
   57     | S_NOT expr
   58     | S_OBRACE expr S_CBRACE
   59     | S_NEW IDENTIFIER S_OBRACE args S_CBRACE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    S_NEWLINE (258) 4
    NUMBER <integer> (259) 35
    FLOAT <floatVal> (260) 36
    IDENTIFIER <strVal> (261) 7 14 15 16 17 19 27 28 30 31 37 39 40 41 59
    STRING <strVal> (262) 38
    S_CLASS (263) 19
    S_FUNC (264) 27 28
    S_VAR (265) 14 15 16
    S_NEW (266) 59
    S_RETURN (267) 11
    S_IF (268) 8 9
    S_ELSE (269) 9
    S_WHILE (270) 10
    S_FOR (271)
    S_ARROW (272) 27
    S_COLON (273) 14 16 30 31
    S_SEMICOLON (274) 5 6 7 11 26
    S_COMMA (275) 31 34
    S_LBRACE (276) 8 9 10 19 27 28
    S_RBRACE (277) 8 9 10 19 27 28
    S_DOT (278) 40 41
    S_EQUALS (279) 7 14 15
    S_PLUS (280) 42
    S_MINUS (281) 43 48
    S_DIV (282) 44
    S_MOD (283) 46
    S_MUL (284) 45
    S_POW (285) 47
    S_EQ (286) 49
    S_NEQ (287) 50
    S_LE (288) 51
    S_GE (289) 52
    S_LT (290) 53
    S_GT (291) 54
    S_AND (292) 55
    S_OR (293) 56
    S_NOT (294) 57
    S_OBRACE (295) 8 9 10 27 28 39 40 58 59
    S_CBRACE (296) 8 9 10 27 28 39 40 58 59
    S_FLOAT_TYPE (297) 18
    S_PRINTLN (298)
    S_SQRT (299)
    UMINUS (300)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    file_content (47)
        on left: 1
        on right: 0
    statements <statementNode> (48)
        on left: 2 3 4
        on right: 1 3 4 8 9 10 27 28
    statement <statementNode> (49)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 3
    declaration <declarationNode> (50)
        on left: 14 15 16
        on right: 5 26
    type <strVal> (51)
        on left: 17 18
        on right: 14 16 27 30 31
    class <classNode> (52)
        on left: 19
        on right: 12
    class_body <classNode> (53)
        on left: 20 21
        on right: 19
    class_members <classNode> (54)
        on left: 22 23 24 25
        on right: 21 23 25
    class_member <declarationNode> (55)
        on left: 26
        on right: 22 23
    function <functionNode> (56)
        on left: 27 28
        on right: 13 24 25
    params <paramNode> (57)
        on left: 29 30 31
        on right: 27 28 31
    args <argNode> (58)
        on left: 32 33 34
        on right: 34 39 40 59
    expr <expressionNode> (59)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 6 7 8 9 10 11 14 15 33 34 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58


State 0

    0 $accept: • file_content $end

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    file_content  go to state 16
    statements    go to state 17
    statement     go to state 18
    declaration   go to state 19
    class         go to state 20
    function      go to state 21
    expr          go to state 22


State 1

    4 statements: S_NEWLINE • statements

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 23
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 2

   35 expr: NUMBER •

    $default  reduce using rule 35 (expr)


State 3

   36 expr: FLOAT •

    $default  reduce using rule 36 (expr)


State 4

    7 statement: IDENTIFIER • S_EQUALS expr S_SEMICOLON
   37 expr: IDENTIFIER •
   39     | IDENTIFIER • S_OBRACE args S_CBRACE

    S_EQUALS  shift, and go to state 24
    S_OBRACE  shift, and go to state 25

    $default  reduce using rule 37 (expr)


State 5

   38 expr: STRING •

    $default  reduce using rule 38 (expr)


State 6

   19 class: S_CLASS • IDENTIFIER S_LBRACE class_body S_RBRACE

    IDENTIFIER  shift, and go to state 26


State 7

   27 function: S_FUNC • IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC • IDENTIFIER S_OBRACE params S_CBRACE S_LBRACE statements S_RBRACE

    IDENTIFIER  shift, and go to state 27


State 8

   14 declaration: S_VAR • IDENTIFIER S_COLON type S_EQUALS expr
   15            | S_VAR • IDENTIFIER S_EQUALS expr
   16            | S_VAR • IDENTIFIER S_COLON type

    IDENTIFIER  shift, and go to state 28


State 9

   59 expr: S_NEW • IDENTIFIER S_OBRACE args S_CBRACE

    IDENTIFIER  shift, and go to state 29


State 10

   11 statement: S_RETURN • expr S_SEMICOLON

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 31


State 11

    8 statement: S_IF • S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE
    9          | S_IF • S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE

    S_OBRACE  shift, and go to state 32


State 12

   10 statement: S_WHILE • S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE

    S_OBRACE  shift, and go to state 33


State 13

   48 expr: S_MINUS • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 34


State 14

   57 expr: S_NOT • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 35


State 15

   58 expr: S_OBRACE • expr S_CBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 36


State 16

    0 $accept: file_content • $end

    $end  shift, and go to state 37


State 17

    1 file_content: statements •

    $default  reduce using rule 1 (file_content)


State 18

    3 statements: statement • statements

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 38
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 19

    5 statement: declaration • S_SEMICOLON

    S_SEMICOLON  shift, and go to state 39


State 20

   12 statement: class •

    $default  reduce using rule 12 (statement)


State 21

   13 statement: function •

    $default  reduce using rule 13 (statement)


State 22

    6 statement: expr • S_SEMICOLON
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_SEMICOLON  shift, and go to state 40
    S_DOT        shift, and go to state 41
    S_PLUS       shift, and go to state 42
    S_MINUS      shift, and go to state 43
    S_DIV        shift, and go to state 44
    S_MOD        shift, and go to state 45
    S_MUL        shift, and go to state 46
    S_POW        shift, and go to state 47
    S_EQ         shift, and go to state 48
    S_NEQ        shift, and go to state 49
    S_LE         shift, and go to state 50
    S_GE         shift, and go to state 51
    S_LT         shift, and go to state 52
    S_GT         shift, and go to state 53
    S_AND        shift, and go to state 54
    S_OR         shift, and go to state 55


State 23

    4 statements: S_NEWLINE statements •

    $default  reduce using rule 4 (statements)


State 24

    7 statement: IDENTIFIER S_EQUALS • expr S_SEMICOLON

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 56


State 25

   39 expr: IDENTIFIER S_OBRACE • args S_CBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 32 (args)

    args  go to state 57
    expr  go to state 58


State 26

   19 class: S_CLASS IDENTIFIER • S_LBRACE class_body S_RBRACE

    S_LBRACE  shift, and go to state 59


State 27

   27 function: S_FUNC IDENTIFIER • S_OBRACE params S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC IDENTIFIER • S_OBRACE params S_CBRACE S_LBRACE statements S_RBRACE

    S_OBRACE  shift, and go to state 60


State 28

   14 declaration: S_VAR IDENTIFIER • S_COLON type S_EQUALS expr
   15            | S_VAR IDENTIFIER • S_EQUALS expr
   16            | S_VAR IDENTIFIER • S_COLON type

    S_COLON   shift, and go to state 61
    S_EQUALS  shift, and go to state 62


State 29

   59 expr: S_NEW IDENTIFIER • S_OBRACE args S_CBRACE

    S_OBRACE  shift, and go to state 63


State 30

   37 expr: IDENTIFIER •
   39     | IDENTIFIER • S_OBRACE args S_CBRACE

    S_OBRACE  shift, and go to state 25

    $default  reduce using rule 37 (expr)


State 31

   11 statement: S_RETURN expr • S_SEMICOLON
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_SEMICOLON  shift, and go to state 64
    S_DOT        shift, and go to state 41
    S_PLUS       shift, and go to state 42
    S_MINUS      shift, and go to state 43
    S_DIV        shift, and go to state 44
    S_MOD        shift, and go to state 45
    S_MUL        shift, and go to state 46
    S_POW        shift, and go to state 47
    S_EQ         shift, and go to state 48
    S_NEQ        shift, and go to state 49
    S_LE         shift, and go to state 50
    S_GE         shift, and go to state 51
    S_LT         shift, and go to state 52
    S_GT         shift, and go to state 53
    S_AND        shift, and go to state 54
    S_OR         shift, and go to state 55


State 32

    8 statement: S_IF S_OBRACE • expr S_CBRACE S_LBRACE statements S_RBRACE
    9          | S_IF S_OBRACE • expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 65


State 33

   10 statement: S_WHILE S_OBRACE • expr S_CBRACE S_LBRACE statements S_RBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 66


State 34

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   48     | S_MINUS expr •
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41

    $default  reduce using rule 48 (expr)


State 35

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr
   57     | S_NOT expr •

    S_DOT  shift, and go to state 41

    $default  reduce using rule 57 (expr)


State 36

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr
   58     | S_OBRACE expr • S_CBRACE

    S_DOT     shift, and go to state 41
    S_PLUS    shift, and go to state 42
    S_MINUS   shift, and go to state 43
    S_DIV     shift, and go to state 44
    S_MOD     shift, and go to state 45
    S_MUL     shift, and go to state 46
    S_POW     shift, and go to state 47
    S_EQ      shift, and go to state 48
    S_NEQ     shift, and go to state 49
    S_LE      shift, and go to state 50
    S_GE      shift, and go to state 51
    S_LT      shift, and go to state 52
    S_GT      shift, and go to state 53
    S_AND     shift, and go to state 54
    S_OR      shift, and go to state 55
    S_CBRACE  shift, and go to state 67


State 37

    0 $accept: file_content $end •

    $default  accept


State 38

    3 statements: statement statements •

    $default  reduce using rule 3 (statements)


State 39

    5 statement: declaration S_SEMICOLON •

    $default  reduce using rule 5 (statement)


State 40

    6 statement: expr S_SEMICOLON •

    $default  reduce using rule 6 (statement)


State 41

   40 expr: expr S_DOT • IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr S_DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 68


State 42

   42 expr: expr S_PLUS • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 69


State 43

   43 expr: expr S_MINUS • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 70


State 44

   44 expr: expr S_DIV • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 71


State 45

   46 expr: expr S_MOD • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 72


State 46

   45 expr: expr S_MUL • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 73


State 47

   47 expr: expr S_POW • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 74


State 48

   49 expr: expr S_EQ • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 75


State 49

   50 expr: expr S_NEQ • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 76


State 50

   51 expr: expr S_LE • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 77


State 51

   52 expr: expr S_GE • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 78


State 52

   53 expr: expr S_LT • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 79


State 53

   54 expr: expr S_GT • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 80


State 54

   55 expr: expr S_AND • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 81


State 55

   56 expr: expr S_OR • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 82


State 56

    7 statement: IDENTIFIER S_EQUALS expr • S_SEMICOLON
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_SEMICOLON  shift, and go to state 83
    S_DOT        shift, and go to state 41
    S_PLUS       shift, and go to state 42
    S_MINUS      shift, and go to state 43
    S_DIV        shift, and go to state 44
    S_MOD        shift, and go to state 45
    S_MUL        shift, and go to state 46
    S_POW        shift, and go to state 47
    S_EQ         shift, and go to state 48
    S_NEQ        shift, and go to state 49
    S_LE         shift, and go to state 50
    S_GE         shift, and go to state 51
    S_LT         shift, and go to state 52
    S_GT         shift, and go to state 53
    S_AND        shift, and go to state 54
    S_OR         shift, and go to state 55


State 57

   39 expr: IDENTIFIER S_OBRACE args • S_CBRACE

    S_CBRACE  shift, and go to state 84


State 58

   33 args: expr •
   34     | expr • S_COMMA args
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_COMMA  shift, and go to state 85
    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_EQ     shift, and go to state 48
    S_NEQ    shift, and go to state 49
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53
    S_AND    shift, and go to state 54
    S_OR     shift, and go to state 55

    $default  reduce using rule 33 (args)


State 59

   19 class: S_CLASS IDENTIFIER S_LBRACE • class_body S_RBRACE

    S_FUNC  shift, and go to state 7
    S_VAR   shift, and go to state 8

    $default  reduce using rule 20 (class_body)

    declaration    go to state 86
    class_body     go to state 87
    class_members  go to state 88
    class_member   go to state 89
    function       go to state 90


State 60

   27 function: S_FUNC IDENTIFIER S_OBRACE • params S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC IDENTIFIER S_OBRACE • params S_CBRACE S_LBRACE statements S_RBRACE

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 29 (params)

    params  go to state 92


State 61

   14 declaration: S_VAR IDENTIFIER S_COLON • type S_EQUALS expr
   16            | S_VAR IDENTIFIER S_COLON • type

    IDENTIFIER    shift, and go to state 93
    S_FLOAT_TYPE  shift, and go to state 94

    type  go to state 95


State 62

   15 declaration: S_VAR IDENTIFIER S_EQUALS • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 96


State 63

   59 expr: S_NEW IDENTIFIER S_OBRACE • args S_CBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 32 (args)

    args  go to state 97
    expr  go to state 58


State 64

   11 statement: S_RETURN expr S_SEMICOLON •

    $default  reduce using rule 11 (statement)


State 65

    8 statement: S_IF S_OBRACE expr • S_CBRACE S_LBRACE statements S_RBRACE
    9          | S_IF S_OBRACE expr • S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT     shift, and go to state 41
    S_PLUS    shift, and go to state 42
    S_MINUS   shift, and go to state 43
    S_DIV     shift, and go to state 44
    S_MOD     shift, and go to state 45
    S_MUL     shift, and go to state 46
    S_POW     shift, and go to state 47
    S_EQ      shift, and go to state 48
    S_NEQ     shift, and go to state 49
    S_LE      shift, and go to state 50
    S_GE      shift, and go to state 51
    S_LT      shift, and go to state 52
    S_GT      shift, and go to state 53
    S_AND     shift, and go to state 54
    S_OR      shift, and go to state 55
    S_CBRACE  shift, and go to state 98


State 66

   10 statement: S_WHILE S_OBRACE expr • S_CBRACE S_LBRACE statements S_RBRACE
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT     shift, and go to state 41
    S_PLUS    shift, and go to state 42
    S_MINUS   shift, and go to state 43
    S_DIV     shift, and go to state 44
    S_MOD     shift, and go to state 45
    S_MUL     shift, and go to state 46
    S_POW     shift, and go to state 47
    S_EQ      shift, and go to state 48
    S_NEQ     shift, and go to state 49
    S_LE      shift, and go to state 50
    S_GE      shift, and go to state 51
    S_LT      shift, and go to state 52
    S_GT      shift, and go to state 53
    S_AND     shift, and go to state 54
    S_OR      shift, and go to state 55
    S_CBRACE  shift, and go to state 99


State 67

   58 expr: S_OBRACE expr S_CBRACE •

    $default  reduce using rule 58 (expr)


State 68

   40 expr: expr S_DOT IDENTIFIER • S_OBRACE args S_CBRACE
   41     | expr S_DOT IDENTIFIER •

    S_OBRACE  shift, and go to state 100

    $default  reduce using rule 41 (expr)


State 69

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   42     | expr S_PLUS expr •
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_DIV  shift, and go to state 44
    S_MOD  shift, and go to state 45
    S_MUL  shift, and go to state 46
    S_POW  shift, and go to state 47

    $default  reduce using rule 42 (expr)


State 70

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   43     | expr S_MINUS expr •
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_DIV  shift, and go to state 44
    S_MOD  shift, and go to state 45
    S_MUL  shift, and go to state 46
    S_POW  shift, and go to state 47

    $default  reduce using rule 43 (expr)


State 71

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   44     | expr S_DIV expr •
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_POW  shift, and go to state 47

    $default  reduce using rule 44 (expr)


State 72

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   46     | expr S_MOD expr •
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_POW  shift, and go to state 47

    $default  reduce using rule 46 (expr)


State 73

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   45     | expr S_MUL expr •
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_POW  shift, and go to state 47

    $default  reduce using rule 45 (expr)


State 74

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   47     | expr S_POW expr •
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT  shift, and go to state 41
    S_POW  shift, and go to state 47

    $default  reduce using rule 47 (expr)


State 75

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   49     | expr S_EQ expr •
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53

    $default  reduce using rule 49 (expr)


State 76

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   50     | expr S_NEQ expr •
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53

    $default  reduce using rule 50 (expr)


State 77

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   51     | expr S_LE expr •
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47

    $default  reduce using rule 51 (expr)


State 78

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   52     | expr S_GE expr •
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47

    $default  reduce using rule 52 (expr)


State 79

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   53     | expr S_LT expr •
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47

    $default  reduce using rule 53 (expr)


State 80

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   54     | expr S_GT expr •
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47

    $default  reduce using rule 54 (expr)


State 81

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   55     | expr S_AND expr •
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_EQ     shift, and go to state 48
    S_NEQ    shift, and go to state 49
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53

    $default  reduce using rule 55 (expr)


State 82

   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr
   56     | expr S_OR expr •

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_EQ     shift, and go to state 48
    S_NEQ    shift, and go to state 49
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53
    S_AND    shift, and go to state 54

    $default  reduce using rule 56 (expr)


State 83

    7 statement: IDENTIFIER S_EQUALS expr S_SEMICOLON •

    $default  reduce using rule 7 (statement)


State 84

   39 expr: IDENTIFIER S_OBRACE args S_CBRACE •

    $default  reduce using rule 39 (expr)


State 85

   34 args: expr S_COMMA • args

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 32 (args)

    args  go to state 101
    expr  go to state 58


State 86

   26 class_member: declaration • S_SEMICOLON

    S_SEMICOLON  shift, and go to state 102


State 87

   19 class: S_CLASS IDENTIFIER S_LBRACE class_body • S_RBRACE

    S_RBRACE  shift, and go to state 103


State 88

   21 class_body: class_members •

    $default  reduce using rule 21 (class_body)


State 89

   22 class_members: class_member •
   23              | class_member • class_members

    S_FUNC  shift, and go to state 7
    S_VAR   shift, and go to state 8

    $default  reduce using rule 22 (class_members)

    declaration    go to state 86
    class_members  go to state 104
    class_member   go to state 89
    function       go to state 90


State 90

   24 class_members: function •
   25              | function • class_members

    S_FUNC  shift, and go to state 7
    S_VAR   shift, and go to state 8

    $default  reduce using rule 24 (class_members)

    declaration    go to state 86
    class_members  go to state 105
    class_member   go to state 89
    function       go to state 90


State 91

   30 params: IDENTIFIER • S_COLON type
   31       | IDENTIFIER • S_COLON type S_COMMA params

    S_COLON  shift, and go to state 106


State 92

   27 function: S_FUNC IDENTIFIER S_OBRACE params • S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC IDENTIFIER S_OBRACE params • S_CBRACE S_LBRACE statements S_RBRACE

    S_CBRACE  shift, and go to state 107


State 93

   17 type: IDENTIFIER •

    $default  reduce using rule 17 (type)


State 94

   18 type: S_FLOAT_TYPE •

    $default  reduce using rule 18 (type)


State 95

   14 declaration: S_VAR IDENTIFIER S_COLON type • S_EQUALS expr
   16            | S_VAR IDENTIFIER S_COLON type •

    S_EQUALS  shift, and go to state 108

    $default  reduce using rule 16 (declaration)


State 96

   15 declaration: S_VAR IDENTIFIER S_EQUALS expr •
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_EQ     shift, and go to state 48
    S_NEQ    shift, and go to state 49
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53
    S_AND    shift, and go to state 54
    S_OR     shift, and go to state 55

    $default  reduce using rule 15 (declaration)


State 97

   59 expr: S_NEW IDENTIFIER S_OBRACE args • S_CBRACE

    S_CBRACE  shift, and go to state 109


State 98

    8 statement: S_IF S_OBRACE expr S_CBRACE • S_LBRACE statements S_RBRACE
    9          | S_IF S_OBRACE expr S_CBRACE • S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE

    S_LBRACE  shift, and go to state 110


State 99

   10 statement: S_WHILE S_OBRACE expr S_CBRACE • S_LBRACE statements S_RBRACE

    S_LBRACE  shift, and go to state 111


State 100

   40 expr: expr S_DOT IDENTIFIER S_OBRACE • args S_CBRACE

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 32 (args)

    args  go to state 112
    expr  go to state 58


State 101

   34 args: expr S_COMMA args •

    $default  reduce using rule 34 (args)


State 102

   26 class_member: declaration S_SEMICOLON •

    $default  reduce using rule 26 (class_member)


State 103

   19 class: S_CLASS IDENTIFIER S_LBRACE class_body S_RBRACE •

    $default  reduce using rule 19 (class)


State 104

   23 class_members: class_member class_members •

    $default  reduce using rule 23 (class_members)


State 105

   25 class_members: function class_members •

    $default  reduce using rule 25 (class_members)


State 106

   30 params: IDENTIFIER S_COLON • type
   31       | IDENTIFIER S_COLON • type S_COMMA params

    IDENTIFIER    shift, and go to state 93
    S_FLOAT_TYPE  shift, and go to state 94

    type  go to state 113


State 107

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE • S_ARROW type S_LBRACE statements S_RBRACE
   28         | S_FUNC IDENTIFIER S_OBRACE params S_CBRACE • S_LBRACE statements S_RBRACE

    S_ARROW   shift, and go to state 114
    S_LBRACE  shift, and go to state 115


State 108

   14 declaration: S_VAR IDENTIFIER S_COLON type S_EQUALS • expr

    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 5
    S_NEW       shift, and go to state 9
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    expr  go to state 116


State 109

   59 expr: S_NEW IDENTIFIER S_OBRACE args S_CBRACE •

    $default  reduce using rule 59 (expr)


State 110

    8 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE • statements S_RBRACE
    9          | S_IF S_OBRACE expr S_CBRACE S_LBRACE • statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 117
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 111

   10 statement: S_WHILE S_OBRACE expr S_CBRACE S_LBRACE • statements S_RBRACE

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 118
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 112

   40 expr: expr S_DOT IDENTIFIER S_OBRACE args • S_CBRACE

    S_CBRACE  shift, and go to state 119


State 113

   30 params: IDENTIFIER S_COLON type •
   31       | IDENTIFIER S_COLON type • S_COMMA params

    S_COMMA  shift, and go to state 120

    $default  reduce using rule 30 (params)


State 114

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW • type S_LBRACE statements S_RBRACE

    IDENTIFIER    shift, and go to state 93
    S_FLOAT_TYPE  shift, and go to state 94

    type  go to state 121


State 115

   28 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_LBRACE • statements S_RBRACE

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 122
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 116

   14 declaration: S_VAR IDENTIFIER S_COLON type S_EQUALS expr •
   40 expr: expr • S_DOT IDENTIFIER S_OBRACE args S_CBRACE
   41     | expr • S_DOT IDENTIFIER
   42     | expr • S_PLUS expr
   43     | expr • S_MINUS expr
   44     | expr • S_DIV expr
   45     | expr • S_MUL expr
   46     | expr • S_MOD expr
   47     | expr • S_POW expr
   49     | expr • S_EQ expr
   50     | expr • S_NEQ expr
   51     | expr • S_LE expr
   52     | expr • S_GE expr
   53     | expr • S_LT expr
   54     | expr • S_GT expr
   55     | expr • S_AND expr
   56     | expr • S_OR expr

    S_DOT    shift, and go to state 41
    S_PLUS   shift, and go to state 42
    S_MINUS  shift, and go to state 43
    S_DIV    shift, and go to state 44
    S_MOD    shift, and go to state 45
    S_MUL    shift, and go to state 46
    S_POW    shift, and go to state 47
    S_EQ     shift, and go to state 48
    S_NEQ    shift, and go to state 49
    S_LE     shift, and go to state 50
    S_GE     shift, and go to state 51
    S_LT     shift, and go to state 52
    S_GT     shift, and go to state 53
    S_AND    shift, and go to state 54
    S_OR     shift, and go to state 55

    $default  reduce using rule 14 (declaration)


State 117

    8 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements • S_RBRACE
    9          | S_IF S_OBRACE expr S_CBRACE S_LBRACE statements • S_RBRACE S_ELSE S_LBRACE statements S_RBRACE

    S_RBRACE  shift, and go to state 123


State 118

   10 statement: S_WHILE S_OBRACE expr S_CBRACE S_LBRACE statements • S_RBRACE

    S_RBRACE  shift, and go to state 124


State 119

   40 expr: expr S_DOT IDENTIFIER S_OBRACE args S_CBRACE •

    $default  reduce using rule 40 (expr)


State 120

   31 params: IDENTIFIER S_COLON type S_COMMA • params

    IDENTIFIER  shift, and go to state 91

    $default  reduce using rule 29 (params)

    params  go to state 125


State 121

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type • S_LBRACE statements S_RBRACE

    S_LBRACE  shift, and go to state 126


State 122

   28 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_LBRACE statements • S_RBRACE

    S_RBRACE  shift, and go to state 127


State 123

    8 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE •
    9          | S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE • S_ELSE S_LBRACE statements S_RBRACE

    S_ELSE  shift, and go to state 128

    $default  reduce using rule 8 (statement)


State 124

   10 statement: S_WHILE S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE •

    $default  reduce using rule 10 (statement)


State 125

   31 params: IDENTIFIER S_COLON type S_COMMA params •

    $default  reduce using rule 31 (params)


State 126

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type S_LBRACE • statements S_RBRACE

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 129
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 127

   28 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_LBRACE statements S_RBRACE •

    $default  reduce using rule 28 (function)


State 128

    9 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE • S_LBRACE statements S_RBRACE

    S_LBRACE  shift, and go to state 130


State 129

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type S_LBRACE statements • S_RBRACE

    S_RBRACE  shift, and go to state 131


State 130

    9 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE • statements S_RBRACE

    S_NEWLINE   shift, and go to state 1
    NUMBER      shift, and go to state 2
    FLOAT       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    STRING      shift, and go to state 5
    S_CLASS     shift, and go to state 6
    S_FUNC      shift, and go to state 7
    S_VAR       shift, and go to state 8
    S_NEW       shift, and go to state 9
    S_RETURN    shift, and go to state 10
    S_IF        shift, and go to state 11
    S_WHILE     shift, and go to state 12
    S_MINUS     shift, and go to state 13
    S_NOT       shift, and go to state 14
    S_OBRACE    shift, and go to state 15

    $default  reduce using rule 2 (statements)

    statements   go to state 132
    statement    go to state 18
    declaration  go to state 19
    class        go to state 20
    function     go to state 21
    expr         go to state 22


State 131

   27 function: S_FUNC IDENTIFIER S_OBRACE params S_CBRACE S_ARROW type S_LBRACE statements S_RBRACE •

    $default  reduce using rule 27 (function)


State 132

    9 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements • S_RBRACE

    S_RBRACE  shift, and go to state 133


State 133

    9 statement: S_IF S_OBRACE expr S_CBRACE S_LBRACE statements S_RBRACE S_ELSE S_LBRACE statements S_RBRACE •

    $default  reduce using rule 9 (statement)
